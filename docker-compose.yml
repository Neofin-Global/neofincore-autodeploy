version: '3.8'
services:
  django:
    image: index.docker.io/phonxis/neofincore_django_master:latest
    container_name: django
    restart: always
    volumes:
      - nginx_conf:/nginx
      - static:/staticfiles
      - media:/media
      - ./init.sh:/init.sh
      - ./wait-for-it.sh:/wait-for-it.sh
    entrypoint: ["/wait-for-it.sh","postgres:5432","--","/init.sh"]
    networks:
      - nginx_network
      - djangonetwork
    depends_on:
      - postgres
    links:
      - postgres:postgres
    env_file: .env
    labels:
      - "com.centurylinklabs.watchtower.enable=true"  # Auto-update by Watchtower

  celeryworker:
    image: index.docker.io/phonxis/neofincore_celeryworker_master:latest
    container_name: celeryworker
    command: celery -A core.celery_app worker -l INFO
    env_file: .env
    depends_on:
      - django
      - redis
    networks:
      - djangonetwork
    labels:
      - "com.centurylinklabs.watchtower.enable=true"  # Auto-update by Watchtower

  celerybeat:
    image: index.docker.io/phonxis/neofincore_celerybeat_master:latest
    container_name: celerybeat
    command: celery -A core.celery_app beat -l INFO
    env_file: .env
    depends_on:
      - django
      - redis
    networks:
      - djangonetwork
    labels:
      - "com.centurylinklabs.watchtower.enable=true"  # Auto-update by Watchtower

  flower:
    image: index.docker.io/phonxis/neofincore_flower_master:latest
    container_name: flower
    command: >
      sh -c "celery \
             -A core.celery_app \
             -b "${CELERY_BROKER_URL}" \
             flower" \
             --basic_auth="${CELERY_FLOWER_USER}:${CELERY_FLOWER_PASSWORD}"
    env_file: .env
    depends_on:
      - django
      - redis
    networks:
      - djangonetwork
    labels:
      - "com.centurylinklabs.watchtower.enable=true"  # Auto-update by Watchtower

  nginx:
    image: index.docker.io/phonxis/neofincore_nginx_master:latest
    container_name: nginx
    restart: always
    expose:
      - 80
      - 443
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - static:/static
      - media:/media
      - certbot-www:/var/www/certbot/:ro
      - certbot-conf:/etc/nginx/ssl/:ro
    depends_on:
      - django
    networks:
      - nginx_network

  postgres:
    image: phonxis/neofincore_postgres_master:latest
    container_name: postgresql
    restart: always
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - djangonetwork
    env_file: .env

  redis:
    image: redis:6
    container_name: redis
    networks:
      - djangonetwork

  certbot-digitalocean-stage:
    image: certbot/dns-digitalocean
    container_name: certbot-digitalocean-stage
    volumes:
      - certbot-www:/var/www/certbot/:rw
      - certbot-conf:/etc/letsencrypt/:rw
      - ./digitalocean.ini:/digitalocean.ini
    command: certonly --dns-digitalocean --dns-digitalocean-credentials /digitalocean.ini -d ${DOMAIN} -d '*.${DOMAIN}'  --email ${DOMAIN_OWNER_EMAIL} --agree-tos
    env_file: .env

  certbot-aws-stage:
    image: certbot/dns-route53 
    container_name: certbot-aws-stage
    volumes:
      - certbot-www:/var/www/certbot/:rw
      - certbot-conf:/etc/letsencrypt/:rw
    command: certonly --dns-route53 --email ${DOMAIN_OWNER_EMAIL} -d ${DOMAIN} -d '*.${DOMAIN}' --agree-tos
    env_file: .env

  certbot-azure-stage:
    image: phonxis/certbot-dns-azure
    container_name: certbot-azure-stage
    volumes:
      - certbot-www:/var/www/certbot/:rw
      - certbot-conf:/etc/letsencrypt/:rw
      - ./dns_creds.ini:/dns_creds.ini
    command: certbot certonly --authenticator dns-azure --preferred-challenges dns --noninteractive --agree-tos --dns-azure-config /dns_creds.ini --email ${DOMAIN_OWNER_EMAIL} -d ${DOMAIN} -d '*.${DOMAIN}'
    env_file: .env

  certbot-prod:
    image: phonxis/neofincore_certbot_master:latest
    container_name: certbot-prod
    volumes:
      - certbot-www:/var/www/certbot/:rw
      - certbot-conf:/etc/letsencrypt/:rw
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${DOMAIN_OWNER_EMAIL} -d ${DOMAIN} --agree-tos

  zabbix-agent:
    image: phonxis/neofincore_zabbix_master:latest
    container_name: zabbixagent
    env_file: .env
    pid: "host" # access and manipulate other containers
    privileged: true
    restart: always
    expose:
      - 10050
    ports:
      - 10050:10050
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - djangonetwork

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    env_file: .env
    # environment:
    #   - TZ=Europe/Kiev
    #   - WATCHTOWER_CLEANUP=true  # Removes old images after updating.
    #   - WATCHTOWER_TRACE=true  # Enable trace mode with very verbose logging.
    #   - WATCHTOWER_DEBUG=true  # Enable debug mode with verbose logging.
    #   - WATCHTOWER_INCLUDE_STOPPED=true  # Will also include created and exited containers.
    #   - WATCHTOWER_REVIVE_STOPPED=true  # Start any stopped containers that have had their image updated.
    #   - WATCHTOWER_LABEL_ENABLE=true  # Update containers that have a com.centurylinklabs.watchtower.enable label set to true.
    #   - WATCHTOWER_MONITOR_ONLY=true  # Will only monitor for new images, but will not update the containers.
    #   - WATCHTOWER_ROLLING_RESTART=true  # Restart one image at time instead of stopping and starting all at once.
    #   # Use Schedule OR Pooling interval
    #   - WATCHTOWER_SCHEDULE="0 0 * * * *"  # Cron expression in 6 fields which defines when and how often to check for new images.
    #   - WATCHTOWER_POLL_INTERVAL=30  # Poll interval (in seconds). This value controls how frequently watchtower will poll for new images.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      #- /home/azureuser/.docker/config.json:/config.json
      - /root/.docker/config.json:/config.json
    # command: --interval 30

volumes:
  postgres_data:
  nginx_conf:
  static:
  media:
  certbot-www:
  certbot-conf:

networks:
  nginx_network:
    driver: bridge
  djangonetwork:
    driver: bridge
