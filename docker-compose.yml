# compose file for running stage application or prod application with single instance
version: '3.8'
#x-redash-service: &redash-service
#  image: redash/redash:8.0.0.b32245
#  depends_on:
#    - redash-postgres
#    - redash-redis
#  env_file: /opt/redash/env
#  restart: unless-stopped

services:
  django:
    image: index.docker.io/phonxis/neofincore_django_master:${APPLICATION_VERSION:-latest}
    container_name: django
    restart: always
    env_file: .env
    entrypoint: ["/wait-for-it.sh","postgres:5432","--","/start.sh"]
    depends_on:
      - postgres
    links:
      - postgres:postgres
    volumes:
      - static:/staticfiles
      - media:/media
      - locale:/project_translations/locale
      - ./wait-for-it.sh:/wait-for-it.sh
    networks:
      - app_network

  celeryworker:
    image: index.docker.io/phonxis/neofincore_celeryworker_master:${APPLICATION_VERSION:-latest}
    container_name: celeryworker
    restart: always
    env_file: .env
    command: celery -A core.celery_app worker -l INFO
    depends_on:
      - django
      - redis
    volumes:
      - media:/media
    networks:
      - app_network

  celeryworker_low_priority:
    image: phonxis/neofincore_celeryworker_low_priority_master:${APPLICATION_VERSION:-latest}
    container_name: celeryworker_low_priority
    restart: always
    env_file: .env
    command: celery -A core.celery_app worker -l INFO -Q low_priority
    depends_on:
      - django
      - redis
    volumes:
      - media:/media
    networks:
      - app_network

  celerybeat:
    image: index.docker.io/phonxis/neofincore_celerybeat_master:${APPLICATION_VERSION:-latest}
    container_name: celerybeat
    restart: always
    env_file: .env
    command: celery -A core.celery_app beat -l INFO
    depends_on:
      - django
      - redis
    networks:
      - app_network

  flower:
    image: index.docker.io/phonxis/neofincore_flower_master:${APPLICATION_VERSION:-latest}
    container_name: flower
    restart: always
    env_file: .env
    command: celery -A core.celery_app -b "${CELERY_BROKER_URL}" flower --basic_auth="${CELERY_FLOWER_USER}:${CELERY_FLOWER_PASSWORD}"
    depends_on:
      - django
      - redis
    networks:
      - app_network

  nginx:
    image: index.docker.io/phonxis/neofincore_nginx_master:${APPLICATION_VERSION:-latest}
    container_name: nginx
    restart: always
    depends_on:
      - django
    volumes:
      - static:/static
      - media:/media
      - ./nginx/default-traefik.conf:/etc/nginx/conf.d/default.conf
    networks:
      - app_network

  traefik:
    image: index.docker.io/phonxis/neofincore_traefik_master:${APPLICATION_VERSION:-latest}
    container_name: traefik
    restart: always
    depends_on:
      - django
    volumes:
      - traefik-acme:/etc/traefik/acme
      - ./traefik/config.yml:/etc/traefik/traefik.yml
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
    networks:
      - app_network

  postgres:
    image: phonxis/neofincore_postgres_master:${APPLICATION_VERSION:-latest}
    container_name: postgresql
    restart: always
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app_network
    env_file: .env

  redis:
    image: redis:6
    container_name: redis
    restart: always
    networks:
      - app_network

  zabbix-agent:
    image: phonxis/neofincore_zabbix_master:${APPLICATION_VERSION:-latest}
    container_name: zabbixagent
    env_file: .env
    pid: "host" # access and manipulate other containers
    privileged: true
    restart: always
    expose:
      - 10050
    ports:
      - 10050:10050
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks:
      - app_network

  #redash-server:
  #  <<: *redash-service
  #  command: server
  #  container_name: redash_server
  #  restart: always
  #  ports:
  #    - "5000:5000"
  #  environment:
  #    REDASH_WEB_WORKERS: 4
  #  networks:
  #    - app_network
  #  links:
  #    - redash-redis:redis
  #    - redash-postgres:postgres
  #    - postgres:app-postgres

  #redash-scheduler:
  #  <<: *redash-service
  #  command: scheduler
  #  container_name: redash_scheduler
  #  environment:
  #    QUEUES: "celery"
  #    WORKERS_COUNT: 1
  #  networks:
  #    - app_network
  #  links:
  #    - redash-redis:redis
  #    - redash-postgres:postgres
  #    - postgres:app-postgres

  #redash-scheduled-worker:
  #  <<: *redash-service
  #  command: worker
  #  container_name: redash_scheduled_worker
  #  environment:
  #    QUEUES: "scheduled_queries,schemas"
  #    WORKERS_COUNT: 1
  #  networks:
  #    - app_network
  #  links:
  #    - redash-redis:redis
  #    - redash-postgres:postgres
  #    - postgres:app-postgres

  #redash-adhoc-worker:
  #  <<: *redash-service
  #  command: worker
  #  container_name: redash_adhoc_worker
  #  environment:
  #    QUEUES: "queries"
  #    WORKERS_COUNT: 2
  #  networks:
  #    - app_network
  #  links:
  #    - redash-redis:redis
  #    - redash-postgres:postgres
  #    - postgres:app-postgres

  #redash-redis:
  #  image: redis:5.0-alpine
  #  container_name: redash_redis
  #  networks:
  #    - app_network
  #  links:
  #    - postgres:app-postgres

  #redash-postgres:
  #  image: postgres:9.6-alpine
  #  env_file: /opt/redash/env
  #  container_name: redash_postgres
  #  volumes:
  #    - /opt/redash/postgres-data:/var/lib/postgresql/data
  #  networks:
  #    - app_network
  #  links:
  #    - redash-redis:redis
  #    - postgres:app-postgres

volumes:
  postgres_data:
  static:
  media:
  locale:
  traefik-acme:

networks:
  app_network:
    driver: bridge
